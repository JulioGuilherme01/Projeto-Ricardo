/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import app.util.ProvaCorrigida;
import app.controller.ProvaController;
import app.util.ConexaoBanco;
import java.sql.Connection;
import app.util.Modelo;


/**
 *
 * @author fabio
 */
public class comparaProva extends javax.swing.JFrame {

    /**
     * Creates new form comparaProva
     */
    public comparaProva() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enviar = new javax.swing.JButton();
        imagemProf = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        imagem = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        enviarprof = new javax.swing.JButton();
        Corrigir = new javax.swing.JButton();
        ResultadoProf = new javax.swing.JLabel();
        ResultAluno = new javax.swing.JLabel();
        Acertos = new javax.swing.JLabel();
        NomeProva = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        BaixarModelo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        jLabel1.setText("Gabarito do Aluno");

        jLabel2.setText("Gabarito Professor");

        enviarprof.setText("Enviar");
        enviarprof.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarprofActionPerformed(evt);
            }
        });

        Corrigir.setText("Corrigir");
        Corrigir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorrigirActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome da Prova");

        jMenu1.setText("Oções");

        BaixarModelo.setText("Baixar Modelo");
        BaixarModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaixarModeloActionPerformed(evt);
            }
        });
        jMenu1.add(BaixarModelo);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(109, 109, 109))
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(enviarprof)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(NomeProva, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211)
                .addComponent(enviar)
                .addGap(125, 125, 125))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(ResultadoProf, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(Corrigir))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(Acertos, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ResultAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(imagemProf, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                        .addComponent(imagem, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(NomeProva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Corrigir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Acertos, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagemProf, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enviarprof, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ResultadoProf, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                            .addComponent(ResultAluno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int tamanho;
    private File imgprof;
    private File imgaluno;
    
    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Selecionar Imagem");
        jfc.setFileFilter(new FileNameExtensionFilter("Arquivo de imagens(.PNG,.JPG,*.JPEG)", "png", "jpg", "jpeg"));
        int resultado = jfc.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                imgaluno = jfc.getSelectedFile();
                Image foto = ImageIO.read(imgaluno).getScaledInstance(imagem.getWidth(), imagem.getHeight(), Image.SCALE_SMOOTH);
                imagem.setIcon(new ImageIcon(foto));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_enviarActionPerformed

    private void enviarprofActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarprofActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Selecionar Imagem");
        jfc.setFileFilter(new FileNameExtensionFilter("Arquivo de imagens(.PNG,.JPG,*.JPEG)", "png", "jpg", "jpeg"));
        int resultado = jfc.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                imgprof = jfc.getSelectedFile();
                Image foto = ImageIO.read(imgprof).getScaledInstance(imagemProf.getWidth(), imagemProf.getHeight(), Image.SCALE_SMOOTH);
                imagemProf.setIcon(new ImageIcon(foto));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_enviarprofActionPerformed

    private void CorrigirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CorrigirActionPerformed
         try {
            if (imgaluno == null || imgprof == null) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione as imagens do aluno e do professor.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String nomeProva = NomeProva.getText().trim();
            if (nomeProva.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, insira o nome da prova.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Carregar as imagens
            BufferedImage imgAluno = carregarImagem(imgaluno);
            BufferedImage imgProfessor = carregarImagem(imgprof);

            int numQuestoes = 10;
            int numOpcoes = 5;

            // Corrigir a prova do aluno e do professor
            List<String> respostasAluno = ProvaCorrigida.corrigirProva(imgAluno, numQuestoes, numOpcoes);
            List<String> respostasProfessor = ProvaCorrigida.corrigirProva(imgProfessor, numQuestoes, numOpcoes);

            // Contar os acertos do aluno
            int acertos = ProvaCorrigida.contarAcertos(respostasAluno, respostasProfessor, imgAluno);

            // Construir a mensagem a ser exibida

            StringBuilder mensagemA = new StringBuilder();
            mensagemA.append("<html><div style='text-align: justify;'>Respostas do Aluno:<br>");
            for (int i = 0; i < respostasAluno.size(); i++) {
                mensagemA.append("Questão ").append(i + 1).append(": ");
                if (!respostasAluno.get(i).isEmpty()) {
                    mensagemA.append(respostasAluno.get(i)).append("<br>");
                } else {
                    mensagemA.append("Nenhuma opção marcada<br>");
                }
            }
            mensagemA.append("</div></html>");

            StringBuilder mensagemP = new StringBuilder();
            mensagemP.append("<html><div style='text-align: justify;'>Respostas do Professor:<br>");
            for (int i = 0; i < respostasProfessor.size(); i++) {
                mensagemP.append("Questão ").append(i + 1).append(": ");
                if (!respostasProfessor.get(i).isEmpty()) {
                    mensagemP.append(respostasProfessor.get(i)).append("<br>");
                } else {
                    mensagemP.append("Nenhuma opção marcada<br>");
                }
            }
            mensagemP.append("</div></html>");

            // Definindo o texto dos JLabels com quebra de linha automática e justificação
            ResultAluno.setText(mensagemA.toString());
            ResultadoProf.setText(mensagemP.toString());

            StringBuilder menssagemacertos = new StringBuilder();
            menssagemacertos.append("Quantidade de acertos: ").append(acertos).append("\n\n");

            String textoAcertos = menssagemacertos.toString();

            Acertos.setText("<html><div style='text-align: justify;'>" + textoAcertos + "</div></html>");

            Image imgAlunoScaled = imgAluno.getScaledInstance(imagem.getWidth(), imagem.getHeight(), Image.SCALE_SMOOTH);
            Image imgProfessorScaled = imgProfessor.getScaledInstance(imagemProf.getWidth(), imagemProf.getHeight(), Image.SCALE_SMOOTH);

            // Criar ImageIcons a partir das imagens redimensionadas
            ImageIcon iconAluno = new ImageIcon(imgAlunoScaled);
            ImageIcon iconProfessor = new ImageIcon(imgProfessorScaled);

            // Definir os ícones dos JLabels
            imagem.setIcon(iconAluno);
            imagemProf.setIcon(iconProfessor);

            ConexaoBanco conexaoBanco = new ConexaoBanco();
            Connection conexao = conexaoBanco.abrirConexão();
            ProvaController provaController = new ProvaController(conexao);
            provaController.enviarNota(nomeProva, acertos);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao processar a ação: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }  

    private BufferedImage carregarImagem(File file) {
        try {
            return ImageIO.read(file);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }    
    
    }//GEN-LAST:event_CorrigirActionPerformed

    private void BaixarModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaixarModeloActionPerformed
        Modelo.baixarModeloGabarito();
    }//GEN-LAST:event_BaixarModeloActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new comparaProva().setVisible(true);
            }
        });
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(comparaProva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new comparaProva().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Acertos;
    private javax.swing.JMenuItem BaixarModelo;
    private javax.swing.JButton Corrigir;
    private javax.swing.JTextField NomeProva;
    private javax.swing.JLabel ResultAluno;
    private javax.swing.JLabel ResultadoProf;
    private javax.swing.JButton enviar;
    private javax.swing.JButton enviarprof;
    private javax.swing.JLabel imagem;
    private javax.swing.JLabel imagemProf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables

    private BufferedImage getBufferedImageFromIcon(ImageIcon imageIcon) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private BufferedImage carregarImagem(JLabel imagem) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
